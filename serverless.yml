service: tech-test-api

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin

build:
  esbuild: false

provider:
  name: aws
  runtime: nodejs20.x
  architecture: arm64
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 256
  timeout: 29
  logRetentionInDays: 14
  tracing:
    apiGateway: true
    lambda: true
  environment:
    DYNAMO_TABLE: ${self:custom.tableName}
    CACHE_TABLE: ${self:custom.cacheTableName}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_OPTIONS: --enable-source-maps
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    IS_OFFLINE: ${env:IS_OFFLINE}
    USERS_TABLE: users-${self:provider.stage}
    SWAPI_BASE_URL: ${env:SWAPI_BASE_URL}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
          Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*"

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt FusedDataTable.Arn
            - !Sub "${FusedDataTable.Arn}/index/*"
            - !GetAtt CacheTable.Arn
            - !GetAtt UsersTable.Arn
            - !Sub "${UsersTable.Arn}/index/*" # Permisos para la nueva tabla de caché

        - Effect: Allow
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource: "*"

functions:
  api:
    handler: src/lambda.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: any
          cors:
            allowedOrigins:
              - '*'
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS

custom:
  defaultRegion: us-east-1
  tableName: fused-data-table-${self:provider.stage}
  cacheTableName: cache-table-${self:provider.stage} # Nombre para la tabla de caché
  serverless-offline:
    httpPort: 3000
    useChildProcesses: true
  prune:
    automatic: true
    number: 3
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn'

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

resources:
  Resources:
    FusedDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL


    CacheTable: # Definición de la nueva tabla de caché
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.cacheTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification: # Habilitamos TTL en esta tabla
          AttributeName: ttl
          Enabled: true
